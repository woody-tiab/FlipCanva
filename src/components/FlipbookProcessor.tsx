import React from 'react';
import { useErrorHandler } from '../hooks/useErrorHandler';
import { ErrorDisplay } from './ErrorDisplay';
import { LoadingSpinner } from './LoadingSpinner';
import FlipbookViewer from './FlipbookViewer';
import { createAppError } from '../utils/errorMessages';
import { ErrorCode } from '../types/error';
import { canvaApiService } from '../services/canvaApi';
import { CanvaConnectionStatus } from './CanvaConnectionStatus';
import { CanvaDesignTester } from './CanvaDesignTester';
import { flipbookApiService } from '../services/flipbookApi';
import { FlipbookMetadata, PageMetadata } from '../types/flipbook';
import './ErrorDisplay.css';
import './LoadingSpinner.css';

interface FlipbookProcessorProps {
  designId?: string;
  onSuccess?: (result: any) => void;
  onCancel?: () => void;
  onDesignIdChange?: (designId: string) => void;
}

export const FlipbookProcessor: React.FC<FlipbookProcessorProps> = React.memo(({
  designId: initialDesignId,
  onSuccess,
  onCancel,
  onDesignIdChange
}) => {
  const [isCompleted, setIsCompleted] = React.useState(false);
  const [completedResult, setCompletedResult] = React.useState<any>(null);
  const [showViewer, setShowViewer] = React.useState(false);
  const [currentPage, setCurrentPage] = React.useState(0);
  const [processCache, setProcessCache] = React.useState<Map<string, any>>(new Map());
  const [isCanvaConnected, setIsCanvaConnected] = React.useState<boolean>(false);
  const [currentDesignId, setCurrentDesignId] = React.useState<string>(initialDesignId || '');

  // Mock ÌîåÎ¶ΩÎ∂Å Îç∞Ïù¥ÌÑ∞Î•º Ïã§Ï†ú Î∑∞Ïñ¥ÏóêÏÑú ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎäî ÌòïÌÉúÎ°ú Î≥ÄÌôò
  const createViewerFlipbook = (result: any): FlipbookMetadata => {
    console.log('üî• createViewerFlipbook input:', result);
    
    const exportData = result.exportData;
    const flipbookData = result.flipbook;
    
    console.log('üî• exportData:', exportData);
    console.log('üî• flipbookData:', flipbookData);
    
    let pages: PageMetadata[] = exportData?.pages?.map((page: any, index: number) => ({
      id: page.id || `page_${index}`,
      pageNumber: index + 1,
      imageUrl: page.url,
      aspectRatio: page.width && page.height ? page.width / page.height : 1.0,
      hasTransparency: false,
      title: `ÌéòÏù¥ÏßÄ ${index + 1}`,
      description: `${flipbookData?.title || 'ÌîåÎ¶ΩÎ∂Å'}Ïùò ${index + 1}Î≤àÏß∏ ÌéòÏù¥ÏßÄ`
    })) || [];

    // üí• OPTIMIZED FALLBACK: ÌéòÏù¥ÏßÄÍ∞Ä ÏóÜÏúºÎ©¥ Ìö®Ïú®Ï†ÅÏù∏ Mock ÌéòÏù¥ÏßÄ ÏÉùÏÑ±
    if (!pages || pages.length === 0) {
      console.log('üî• NO PAGES FOUND! Creating optimized fallback pages');
      const baseUrl = 'https://placehold.co/800x1200';
      const colors = ['667eea', '764ba2', 'a8e6cf'];
      
      pages = colors.map((color, index) => ({
        id: `${currentDesignId}_page_${index + 1}`,
        pageNumber: index + 1,
        imageUrl: `${baseUrl}/${color}/ffffff/png?text=Page+${index + 1}`,
        aspectRatio: 800 / 1200,
        hasTransparency: false,
        title: `ÌéòÏù¥ÏßÄ ${index + 1}`,
        description: `${flipbookData?.title || 'ÌîåÎ¶ΩÎ∂Å'}Ïùò ${index + 1}Î≤àÏß∏ ÌéòÏù¥ÏßÄ`
      }));
    }

    console.log('üî• Generated pages:', pages);

    const flipbook = {
      id: flipbookData?.id || 'mock-flipbook',
      title: flipbookData?.title || 'Mock ÌîåÎ¶ΩÎ∂Å',
      description: flipbookData?.description || 'Mock Îç∞Ïù¥ÌÑ∞Î°ú ÏÉùÏÑ±Îêú ÌîåÎ¶ΩÎ∂Å',
      canvaDesignId: currentDesignId,
      userId: flipbookData?.userId || 'demo-user',
      status: 'published' as any,
      visibility: 'private' as any,
      pageCount: pages.length,
      pages: pages,
      createdAt: flipbookData?.createdAt || new Date().toISOString(),
      updatedAt: flipbookData?.updatedAt || new Date().toISOString(),
      viewCount: flipbookData?.viewCount || 0,
      isFeatured: false,
      tags: [],
      categories: []
    };

    console.log('üî• Final flipbook metadata:', flipbook);
    return flipbook;
  };

  const {
    hasError,
    isLoading,
    isRetrying,
    canRetry,
    currentError,
    retryCount,
    maxRetries,
    processingStatus,
    progress,
    currentStep,
    setError,
    clearError,
    setStatus,
    retry,
    executeWithErrorHandling
  } = useErrorHandler({
    maxRetries: 3,
    retryDelay: 1000,
    onError: (error) => {
      console.error('Flipbook processing error:', error);
    },
    onRetry: (count) => {
      console.log(`Retrying... attempt ${count}`);
    },
    onSuccess: () => {
      console.log('Flipbook processing completed successfully');
    }
  });

  const processCanvaDesign = async () => {
    // Check cache first
    if (processCache.has(currentDesignId)) {
      console.log('üéØ Using cached result for design:', currentDesignId);
      return processCache.get(currentDesignId);
    }
    
    console.log('üöÄ Starting process with Canva connection status:', isCanvaConnected);
    
    // Step 1: Validate Design
    setStatus('loading', { currentStep: 'Canva ÎîîÏûêÏù∏ Í≤ÄÏ¶ù Ï§ë...', progress: 10 });
    const validationResult = await canvaApiService.validateDesign(currentDesignId);
    
    if (!validationResult.success) {
      throw createAppError(
        ErrorCode.CANVA_TIMEOUT,
        validationResult.error?.message || 'Canva ÎîîÏûêÏù∏ Í≤ÄÏ¶ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.',
        `Design ID: ${currentDesignId}`
      );
    }

    // Step 2: Export Design to Images
    setStatus('loading', { currentStep: 'ÌéòÏù¥ÏßÄ Ïù¥ÎØ∏ÏßÄ ÎÇ¥Î≥¥ÎÇ¥Îäî Ï§ë...', progress: 40 });
    const exportResult = await canvaApiService.exportDesign(currentDesignId, 'PNG');
    
    console.log('üî• Raw exportResult:', exportResult);
    
    if (!exportResult.success) {
      throw createAppError(
        ErrorCode.CANVA_TIMEOUT,
        exportResult.error?.message || 'Canva Ïù¥ÎØ∏ÏßÄ ÎÇ¥Î≥¥ÎÇ¥Í∏∞Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.',
        `Design ID: ${currentDesignId}`
      );
    }

    // Ïó∞Í≤∞ ÏÉÅÌÉúÏóê Îî∞Î•∏ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
    let actualExportData = exportResult.data;
    if (!actualExportData?.pages) {
      const dataType = isCanvaConnected ? 'API Í≤∞Í≥ºÍ∞Ä ÎπÑÏñ¥ ÏûàÏñ¥' : 'Mock Î™®ÎìúÏù¥ÎØÄÎ°ú';
      console.log(`üî• ${dataType} fallback Îç∞Ïù¥ÌÑ∞Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§.`);
      actualExportData = {
        designId: currentDesignId,
        format: 'PNG',
        pages: [
          {
            id: `${currentDesignId}_page_1`,
            url: `https://placehold.co/800x1200/667eea/ffffff/png?text=Page+1`,
            width: 800,
            height: 1200,
          },
          {
            id: `${currentDesignId}_page_2`,
            url: `https://placehold.co/800x1200/764ba2/ffffff/png?text=Page+2`,
            width: 800,
            height: 1200,
          },
          {
            id: `${currentDesignId}_page_3`,
            url: `https://placehold.co/800x1200/a8e6cf/ffffff/png?text=Page+3`,
            width: 800,
            height: 1200,
          }
        ],
        totalPages: 3,
        exportedAt: new Date().toISOString()
      };
    }

    // Step 3: Create Flipbook
    setStatus('loading', { 
      currentStep: 'ÌîåÎ¶ΩÎ∂Å Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ï†ÄÏû• Ï§ë...', 
      progress: 70 
    });
    const flipbookData = {
      title: validationResult.data?.designInfo?.title || `${isCanvaConnected ? 'Canva' : 'Mock'} Flipbook ${currentDesignId}`,
      description: `${isCanvaConnected ? 'Canva API' : 'Mock Îç∞Ïù¥ÌÑ∞'}Î°ú ÏÉùÏÑ±Îêú ÌîåÎ¶ΩÎ∂Å (${currentDesignId})`,
      canvaDesignId: currentDesignId,
      userId: 'demo-user'
    };

    const flipbookResult = await flipbookApiService.createFlipbook(flipbookData);
    
    if (!flipbookResult.success) {
      throw createAppError(
        ErrorCode.UPLOAD_FAILED,
        flipbookResult.error?.message || 'ÌîåÎ¶ΩÎ∂Å ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.',
        `Design ID: ${currentDesignId}`
      );
    }

    setStatus('loading', { currentStep: 'ÏôÑÎ£å!', progress: 100 });

    const result = {
      designId: currentDesignId,
      flipbook: flipbookResult.data,
      exportData: actualExportData,
      validationData: validationResult.data
    };
    
    // Cache the result
    setProcessCache(prev => new Map(prev.set(currentDesignId, result)));
    console.log('üéØ Cached result for design:', currentDesignId);

    return result;
  };

  const handleProcess = async () => {
    setIsCompleted(false);
    setCompletedResult(null);
    
    const result = await executeWithErrorHandling(
      processCanvaDesign,
      {
        loadingMessage: 'ÌîåÎ¶ΩÎ∂Å Ï≤òÎ¶¨Î•º ÏãúÏûëÌï©ÎãàÎã§...',
        successMessage: 'ÌîåÎ¶ΩÎ∂ÅÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!'
      }
    );

    if (result) {
      console.log('üéâ Process completed with result:', result);
      console.log('üéØ Current processingStatus:', processingStatus);
      console.log('üéØ Setting isCompleted to true');
      
      setIsCompleted(true);
      setCompletedResult(result);
      onSuccess?.(result);
    }
  };

  const handleRetry = async () => {
    try {
      const result = await retry(processCanvaDesign);
      if (result) {
        onSuccess?.(result);
      }
    } catch (error) {
      // Error is already handled by the retry function
    }
  };

  const handleDismissError = () => {
    clearError();
  };

  const isProcessing = isLoading || isRetrying;
  const isSuccess = isCompleted && !hasError;

  // ÏÑ±Îä• ÏµúÏ†ÅÌôî: ÎîîÎ≤ÑÍπÖ Î°úÍ∑∏Î•º Ï°∞Í±¥Î∂ÄÎ°úÎßå Ï∂úÎ†•
  React.useEffect(() => {
    if (process.env.NODE_ENV === 'development') {
      console.log('üîç FlipbookProcessor state change:', {
        isProcessing,
        isSuccess,
        isCompleted,
        processingStatus,
        hasError,
        cacheSize: processCache.size
      });
    }
  }, [isProcessing, isSuccess, isCompleted, processingStatus, hasError, processCache.size]);

  // ÌîåÎ¶ΩÎ∂Å Î∑∞Ïñ¥Í∞Ä Ïó¥Î†§ÏûàÎäî Í≤ΩÏö∞
  if (showViewer && completedResult) {
    const viewerFlipbook = createViewerFlipbook(completedResult);
    
    return (
      <div className="flipbook-viewer-container">
        <div className="viewer-header">
          <button
            className="back-button"
            onClick={() => setShowViewer(false)}
          >
            ‚Üê Îí§Î°ú Í∞ÄÍ∏∞
          </button>
          <h3>{viewerFlipbook.title}</h3>
          <div className="viewer-info">
            <span>ÎîîÏûêÏù∏ ID: {currentDesignId}</span>
            <span>|</span>
            <span>{viewerFlipbook.pageCount}ÌéòÏù¥ÏßÄ</span>
          </div>
        </div>
        <div className="viewer-content">
          <FlipbookViewer
            flipbook={viewerFlipbook}
            currentPage={currentPage}
            onPageChange={setCurrentPage}
            autoPlay={false}
            controls={true}
          />
        </div>
      </div>
    );
  }

  return (
    <div className="flipbook-processor">
      <div className="processor-header">
        <h3>ÌîåÎ¶ΩÎ∂Å ÏÉùÏÑ±</h3>
        {currentDesignId && (
          <p>ÎîîÏûêÏù∏ ID: <code>{currentDesignId}</code></p>
        )}
        
        {/* Canva Connection Status */}
        <div style={{ marginTop: '16px' }}>
          <CanvaConnectionStatus 
            onConnectionChange={setIsCanvaConnected}
          />
        </div>
      </div>

      {/* Loading State */}
      {isProcessing && (
        <div className="processor-loading">
          <LoadingSpinner
            status={processingStatus}
            progress={progress}
            currentStep={currentStep}
            size="large"
            showProgress={true}
          />
        </div>
      )}

      {/* Success State */}
      {isSuccess && (
        <div className="processor-success">
          <div className="success-message">
            <h4>‚úÖ ÌîåÎ¶ΩÎ∂ÅÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!</h4>
            <p>ÎîîÏûêÏù∏ ID: <code>{currentDesignId}</code>Î°úÎ∂ÄÌÑ∞ ÌîåÎ¶ΩÎ∂ÅÏùÑ ÏÉùÏÑ±ÌñàÏäµÎãàÎã§.</p>
            {completedResult && (
              <div className="flipbook-details">
                <h5>ÏÉùÏÑ±Îêú ÌîåÎ¶ΩÎ∂Å Ï†ïÎ≥¥:</h5>
                <ul>
                  <li><strong>ÌîåÎ¶ΩÎ∂Å ID:</strong> {completedResult.flipbook?.id}</li>
                  <li><strong>Ï†úÎ™©:</strong> {completedResult.flipbook?.title}</li>
                  <li><strong>ÌéòÏù¥ÏßÄ Ïàò:</strong> {completedResult.exportData?.totalPages || 0}Í∞ú</li>
                  <li><strong>ÏÉùÏÑ± ÏãúÍ∞Ñ:</strong> {completedResult.flipbook?.createdAt ? new Date(completedResult.flipbook.createdAt).toLocaleString('ko-KR') : 'N/A'}</li>
                </ul>
              </div>
            )}
            <div className="success-actions">
              <button 
                className="view-flipbook-button"
                onClick={() => {
                  if (completedResult) {
                    setCurrentPage(0);
                    setShowViewer(true);
                  }
                }}
              >
                üìñ ÌîåÎ¶ΩÎ∂Å Î≥¥Í∏∞
              </button>
              <button 
                className="new-flipbook-button"
                onClick={() => {
                  setIsCompleted(false);
                  setCompletedResult(null);
                  clearError();
                  setStatus('idle');
                }}
              >
                ÏÉà ÌîåÎ¶ΩÎ∂Å ÎßåÎì§Í∏∞
              </button>
              {onCancel && (
                <button
                  className="done-button"
                  onClick={onCancel}
                >
                  ÏôÑÎ£å
                </button>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Error State */}
      {hasError && currentError && (
        <div className="processor-error">
          <ErrorDisplay
            error={currentError}
            onRetry={canRetry ? handleRetry : undefined}
            onDismiss={handleDismissError}
            isRetrying={isRetrying}
            retryCount={retryCount}
            maxRetries={maxRetries}
            showAsModal={false}
          />
        </div>
      )}

      {/* Action Buttons */}
      {!hasError && !isProcessing && !isSuccess && (
        <div className="processor-actions">
          <button
            className="process-button"
            onClick={handleProcess}
          >
            ÌîåÎ¶ΩÎ∂Å ÏÉùÏÑ± ÏãúÏûë
          </button>
          
          {onCancel && (
            <button
              className="cancel-button"
              onClick={onCancel}
            >
              Ï∑®ÏÜå
            </button>
          )}
        </div>
      )}

      {/* Demo Error Buttons (for testing) */}
      <div className="demo-controls">
        <h4>ÌÖåÏä§Ìä∏Ïö© ÏóêÎü¨ ÏãúÎÆ¨Î†àÏù¥ÏÖò</h4>
        <div className="demo-buttons">
          <button onClick={() => setError(createAppError(ErrorCode.CANVA_TIMEOUT))}>
            ÌÉÄÏûÑÏïÑÏõÉ ÏóêÎü¨
          </button>
          <button onClick={() => setError(createAppError(ErrorCode.INSUFFICIENT_PAGES))}>
            ÌéòÏù¥ÏßÄ Î∂ÄÏ°± ÏóêÎü¨
          </button>
          <button onClick={() => setError(createAppError(ErrorCode.UPLOAD_FAILED))}>
            ÏóÖÎ°úÎìú Ïã§Ìå® ÏóêÎü¨
          </button>
          <button onClick={() => setError(createAppError(ErrorCode.UNKNOWN_ERROR))}>
            Ïïå Ïàò ÏóÜÎäî ÏóêÎü¨
          </button>
        </div>
      </div>
    </div>
  );
});

FlipbookProcessor.displayName = 'FlipbookProcessor';